#  Python bindings for the Versor library
#  Copyright (c) 2015 Lars Tingelstad <lars.tingelstad@ntnu.no>
#
#  Permission is hereby granted, free of charge, to any person obtaining
#  a copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
#  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

plugin_name = "versorninja"
module_name = 'm'

license_text = '''
// Python bindings for the Versor library
// Copyright (c) 2015 Lars Tingelstad <lars.tingelstad@ntnu.no>
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

autogenerated_warning = ['// THIS FILE IS AUTO GENERATED, DO NOT MODIFY!']

includes = ['#include <pybind11/pybind11.h>',
            '#include "game/vsr/cga_types.h"',
            '#include "game/vsr/generic_op.h"']

namespace = ['namespace py = pybind11;',
             'using namespace vsr::cga;']

class VersorBindingsGenerator(object):
    def __init__(self, plugin_name, module_name):
        self._plugin_name = plugin_name
        self._module_name = module_name
        self._filename = 'vsr_{}_py.cpp'.format(plugin_name.lower())

    def __enter__(self):
        self._file = open(self._filename, 'w')
        return self

    def generate_bindings(self):
        self._writelines(license_text)
        #self._file.writelines(license_text)
        self._add_newline()
        self._writelines_with_newline(includes)
        self._add_newline()
        self._writelines_with_newline(namespace)
        self._add_module()

    def _add_module(self):
        module  = ['void init_{}(const py::module& {}) {{'.format(self._plugin_name.lower(), self._module_name)]
                                                         #'\n\ py::class_<{cpp_class}>({module},"{py_class}"{docstring})\n{methods}\n  ;\n'.format(cpp_class=cpp_class,
        self._writelines_with_newline(module)





    def _add_newline(self):
        self._file.write('\n')

    def _writelines(self, lines):
        self._file.writelines(lines)

    def _writelines_with_newline(self, lines):
        [self._file.writelines([line, '\n']) for line in lines]

    def __exit__(self, exc_type, exc_value, traceback):
        self._file.close()

named_types = ['Biv', 'Bst', 'Cir', 'Con', 'Dil', 'Dll', 'Dlp', 'Dls', 'Drb',
               'Drt', 'Drv', 'Flp', 'Grt', 'Inf', 'Lin', 'Mnk', 'Mot', 'Ori',
               'Par', 'Pln', 'Pnt', 'Pss', 'Rot', 'Sca', 'Sph', 'Tnb', 'Tnt',
               'Tnv', 'Tri', 'Trs', 'Trv', 'Tsd', 'Vec']


#f = open('test.cpp', 'w')
#f.writelines(license_text)
#f.writelines('\n')
#f.writelines(autogenerated_warning)
#f.writelines('\n')
#f.writelines(includes)
#f.writelines('\n')
#f.close()


if __name__ == '__main__':
    for t in named_types:
        with VersorBindingsGenerator(t, module_name) as v:
            v.generate_bindings()

def generate_method(cpp_class, module, py_class, docstring='', methods=''):
    return

#'  py::class_<{cpp_class}>({module},
#"{py_class}"{docstring})\n{methods}\n  ;\n'.format(cpp_class=cpp_class,
#module=module,
#py_class=py_class,
#docstring=docstring,
#methods=methods)

#def plugin(name, module, body):
    #return 'PYBIND11_PLUGIN({name}) {{ \n\py::module {module}("{name}");\n{body}\n  return {module}.ptr(); \n}}'.format(name=name, module=module, body=body)
